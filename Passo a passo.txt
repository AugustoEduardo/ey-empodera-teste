1- Suba o arquivo principal Seletores CSS.html na branch main usando o Tortoise Git (e este arquivo texto também).

2- Use o Git Bash Here na pasta contendo os arquivos. Por segurança, iremos mudar a branch para a dos desenvolvedores e,
em seguida, mudaremos de novo para a nossa própria branch. Fazemos isso como uma questão de organização, onde "dev" será
a branch contendo todas as modificações do arquivo feitas pelos desenvolvedores, "main" será a branch onde todas as
modificações em "dev" foram aprovadas e inseridas no arquivo base, e "feature/nomedoarquivo.html" vai ser a branch onde
iremos trabalhar.
Para mudar de branch, digite "git checkout -b dev", tecle ENTER, depois digite "git checkout -b feature/seletorescss"
e tecle ENTER mais uma vez.

3- Faça qualquer alteração no arquivo. Apague, edite ou acrescente alguma(s) linha(s) de código e salve-o.
Depois clique com o botão direito sobre a pasta e dê um commit com o Git Tortoise (veja que estará na branch nova).
Antes de escrever a mensagem, commitar e subir o projeto, você pode dar dois cliques no arquivo para comparar as alterações
feitas com o código como estava antes. Poderá, inclusive, fazer mais alterações na nova janela que abrir.
Quando terminar, escreva a mensagem, dê o commit e o push no repositório do Github.

4- Vamos imaginar que você está trabalhando em grupo. Você vai dar um descanso enquanto seus colegas trabalham. Quando
voltar, é bem provável que seus colegas tenham feito diversas alterações, diversos commits e outras branches. Então, no
Git Bash, digite "git fetch" para receber um log com todas as atualizações feitas no projeto. E se alguém tiver colocado
algo em cima do que você está fazendo, dê um "git pull --rebase" para começar a trabalhar com o projeto atualizado.
Isto é muito importante, pois, se o seu código já estiver muito antigo e seus colegas mexeram demais no servidor, você
não poderá subir seu projeto se ele não estiver atualizado, já que isso daria muito problema no seu projeto.

5- Veremos o item 4 na prática. No repositório do GitHub, troque a branch para feature/seletorescss. Daí, entre no arquivo
html e edite-o usando o botão de lápis no canto superior direito do código. Em seguida, faça mais uma alteração no arquivo
que está em sua máquina, de forma que as alterações da máquina e do Github sejam diferentes. Quando der commit e push no
Tortoise Git, deve aparecer uma mensagem de erro.
Vá ao Git Bash e use o comando "git pull --rebase" (o rebase é para evitar possíveis problemas). Se der algum erro, é porque
provavelmente as alterações foram feitas nas mesmas linhas, e o Git Bash pedirá para você resolver isso manualmente. Sendo
este o caso, clique com o botão direito na pasta dos arquivos, vá em TortoiseGit e depois em Resolve.
Escolha quais alterações manter e quais descartar, depois salve e escolha a opção "mark as resolved". Feito isso, volte ao
Git Bash e digite "git rebase --continue". Repita o procedimento até todos os erros serem corrigidos (se houve apenas um
commit no Github, precisará usar este procedimento uma só vez. Caso contrário, tem que ir no Resolve e ir dando git rebase
--continue até acabar). Termine a etapa do Git Bash digitando :wq. Por fim, dê git status para verificar a situação do
programa e depois git push para colocar o arquivo no repositório.

6- Retornemos à branch dev digitando "git checkout dev". Aliás, esquecemos de fazer algo importante, que é deixar o
Github reconhecer a existência da branch dev antes de inserirmos algo nela (que também deveria ter sido feito no feature/
seletorescss, mas agora não precisa). Para isso, digite "git push --set-upstream origin dev". Agora ela estará visível no
repositório do Github.
Antes de colocar nosso arquivo na dev, é vital que demos o "git pull --rebase" para verificar se outros usuários mexeram
nessa branch e assim deixar nosso programa atualizado. A próxima etapa seria fazer o checkout no feature/seletorescss
novamente para alterarmos os arquivos seguindo o dev atualizado. Em seguida, escreveremos "git rebase dev" e "git checkout
dev" para colocar, na branch dev atualizada, os nossos códigos. Tudo o que estiver na feature/seletorescss em conjunto com
a dev atualizada precisa estar na branch dev através do comando "git merge feature/seletorescss --no-ff", que é o método
Fast Forward. Ele automaticamente cria uma mensagem de commit de quando damos merge nas branches. Saia com o comando ":wq".
Só falta agora colocar no repositório. Um simples "git push" fará o trabalho.

7- O que fizemos: Saímos de dev, criamos uma branch, mexemos numa página html, voltamos pra dev ao terminarmos o trabalho.
A próxima branch criada a partir de dev vai ter tudo o que fizemos na página html junto com quaisquer alterações feitas
pelos colegas. A feature/seletorescss vai pro lixo porque não mexemos mais nessa branch quando voltamos pra dev. É o mesmo
procedimento: criamos outra branch com o "git checkout -b nomedabranch" e iremos mexer nesta "etapa nº2" do trabalho.
E antes de criá-la, sempre dê um "git pull --rebase" para verificar se o repositório da sua máquina está atualizado.

8- Como um extra, quero testar o funcionamento do .gitignore. Coloque quaisquer arquivos na sua pasta. Depois, quando for
dar commit com o TortoiseGit, selecione esses arquivos na lista de baixo, clique com o botão direito e vá em "Add to ignore
list". Esta vai ser uma lista com todos os arquivos que você não quer colocar no Github.

9- Para ver um resumo do que você fez, no formato de branches, clique com o botão direito sob a pasta, vá em TortoiseGit e
depois em Show Log.